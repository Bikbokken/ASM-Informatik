@page "/categories"
@using Microsoft.AspNetCore.Authorization
@inject AssetCategoryService AssetCategoryService
@attribute [Authorize]

<h3 class="fw-bold">Asset Categories</h3>

<EditForm Model="formModel" OnValidSubmit="SaveCategory">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-3">
        <div class="col-md-5">
            <label>Name</label>
            <InputText placeholder="Name" class="form-control" @bind-Value="formModel.Name" />
        </div>
        <div class="col-md-5">
            <label>Parent Category (optional)</label>
            <InputSelect class="form-control" @bind-Value="formModel.ParentId">
                <option value="">(None)</option>
                @foreach (var cat in allCategories.Where(c => c.Id != formModel.Id))
                {
                    <option value="@cat.Id">@cat.Name</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-2">
            <label></label>
            <button type="submit" class="w-100 btn btn-primary">@((formModel.Id == 0) ? "Add" : "Update")</button>
            @if (formModel.Id != 0)
            {
                <button type="button" class="btn btn-secondary" @onclick="ResetForm">Cancel</button>
            }
        </div>

    </div>



    
</EditForm>

<hr />

@if (topLevelCategories.Count == 0)
{
    <p>No categories found.</p>
}
else
{

    <table class="table table-hover table-striped table-bordered">
        <thead class="table-light">
            <tr>
                <th>Existing Categories</th>
                <th style="width:10%"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in topLevelCategories)
            {
                <tr>
                    <td>@category.Name</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => EditCategory(category)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteCategory(category)">Delete</button>
                    </td>
                </tr>
                @RenderCategoryChildren(category.Children, 1)

            }
        </tbody>
    </table>

}



@code {
    RenderFragment RenderCategoryChildren(IEnumerable<AssetCategory> children, int indentLevel) => builder =>
       {
           if (children == null) return;

           int seq = 0;
           foreach (var child in children)
           {
               builder.OpenElement(seq++, "tr");

               builder.OpenElement(seq++, "td");
               builder.AddAttribute(seq++, "style", $"padding-left: {indentLevel * 20}px;");
               builder.AddContent(seq++, $"- {child.Name}");
               builder.CloseElement(); // td
               builder.OpenElement(seq++, "td");

               builder.OpenElement(2, "button");
               builder.AddAttribute(3, "class", "btn btn-sm btn-outline-primary me-1");
               builder.AddAttribute(4, "onclick", EventCallback.Factory.Create(this, () => EditCategory(child)));
               builder.AddContent(5, "Edit");
               builder.CloseElement();

               builder.OpenElement(6, "button");
               builder.AddAttribute(7, "class", "btn btn-sm btn-outline-danger");
               builder.AddAttribute(8, "onclick", EventCallback.Factory.Create(this, () => DeleteCategory(child)));
               builder.AddContent(9, "Delete");
               builder.CloseElement();
               builder.CloseElement(); // td

               builder.CloseElement(); // tr


           if (child.Children.Any())
           {
                Console.WriteLine("Rendering children for: " + child.Name);
                builder.AddContent(seq++, RenderCategoryChildren(child.Children, indentLevel + 1));
           }
       }
       };

    private AssetCategory formModel = new();
    private List<AssetCategory> topLevelCategories = new();
    private List<AssetCategory> allCategories = new();



    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        allCategories = await AssetCategoryService.GetAllAsync();

        // Recursively build tree
        foreach (var category in allCategories)
        {
            category.Children = allCategories
                .Where(c => c.ParentId == category.Id)
                .OrderBy(c => c.Name)
                .ToList();
        }

        topLevelCategories = allCategories
            .Where(c => c.ParentId == null)
            .OrderBy(c => c.Name)
            .ToList();
    }


    private async Task SaveCategory()
    {
        if (formModel.Id == 0)
        {
            await AssetCategoryService.CreateCategoryAsync(formModel);
        }
        else
        {
            await AssetCategoryService.UpdateCategoryAsync(formModel);
        }

        ResetForm();
        await LoadCategories();
    }

    private void EditCategory(AssetCategory category)
    {
        formModel = new AssetCategory
            {
                Id = category.Id,
                Name = category.Name,
                ParentId = category.ParentId
            };
    }

    private async Task DeleteCategory(AssetCategory category)
    {
        await AssetCategoryService.DeleteCategoryAsync(category.Id);
        await LoadCategories();
    }

    private void ResetForm()
    {
        formModel = new();
    }

    RenderFragment CategoryItem(AssetCategory category) => builder =>
    {
        builder.OpenElement(0, "li");
        builder.AddContent(1, $"{category.Name} ");

        builder.OpenElement(2, "button");
        builder.AddAttribute(3, "class", "btn btn-sm btn-outline-primary me-1");
        builder.AddAttribute(4, "onclick", EventCallback.Factory.Create(this, () => EditCategory(category)));
        builder.AddContent(5, "Edit");
        builder.CloseElement();

        builder.OpenElement(6, "button");
        builder.AddAttribute(7, "class", "btn btn-sm btn-outline-danger");
        builder.AddAttribute(8, "onclick", EventCallback.Factory.Create(this, () => DeleteCategory(category)));
        builder.AddContent(9, "Delete");
        builder.CloseElement();

        if (category.Children.Any())
        {
            builder.OpenElement(10, "ul");
            foreach (var child in category.Children)
            {
                builder.AddContent(11, CategoryItem(child));
            }
            builder.CloseElement();
        }

        builder.CloseElement();
    };
}
