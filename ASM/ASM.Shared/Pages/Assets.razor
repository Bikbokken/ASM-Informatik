@page "/assets"
@inject AssetService AssetService
@inject IJSRuntime JS


<div class="d-flex mb-2 align-items-center justify-content-between w-100">
    <h3 class="fw-bold">All assets</h3>
    <div>
        <a class="btn btn-md btn-primary mb-0" href="/assets/new">New</a>
    </div>
</div>


<input type="text"
@bind="serialSearchTerm"
@oninput="OnSerialSearchChanged"
class="form-control mb-4"
placeholder="Search by serial number..."
style="max-width: 300px;" />


<table class="table table-hover table-striped table-bordered">
    <thead class="table-light">
        <tr>
            <th>Navn</th>
            <th>Model</th>
            <th>Serienummer</th>
            <th>Kategori</th>
            <th>Status</th>
            <th>Placering</th>
            <th>Ansvarlig</th>
            <th>Indkøbsdato</th>
            <th>Pris</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var asset in filteredAssets)
        {
            <tr>
                <td>@asset.Name</td>
                <td>@asset.Model</td>
                <td>@asset.SerialNumber</td>
                <td>@asset.Category?.Name</td>
                <td>
                    <span class="badge @GetStatusBadgeClass(asset.CurrentStatus)">
                        @asset.CurrentStatus
                    </span>
                </td>
                <td>@asset.Location?.Name</td>
                <td>@asset.ResponsibleUser?.Name</td>
                <td>@asset.PurchaseDate.ToShortDateString()</td>
                <td>@asset.Price.ToString("C")</td>
                <td class="text-center">
                    <a class="btn btn-sm btn-primary" href="/asset/@asset.Id">Edit</a>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteAsset(asset.Id)">Delete</button>

                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Asset> allAssets = new();
    private List<Asset> filteredAssets = new();
    private List<AssetCategory> categories = new();

    private string? selectedStatus;
    private int? selectedCategoryId;
    private string? serialSearchTerm;
    private void OnSerialSearchChanged(ChangeEventArgs e)
    {
        serialSearchTerm = e.Value?.ToString();
        ApplyFilters();
    }

    private readonly string[] statuses = new[]
    {
        "Tilgængelig", "I brug", "Udlånt", "Til reparation", "Udfaset"
    };

    protected override async Task OnInitializedAsync()
    {
        categories = await AssetService.GetCategoriesAsync();
        allAssets = await AssetService.GetFilteredAssetsAsync(null, null); // fetch everything
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredAssets = allAssets.Where(asset => 
            (string.IsNullOrWhiteSpace(serialSearchTerm) ||
             (asset.SerialNumber?.Contains(serialSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
        ).ToList();
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Tilgængelig" => "bg-success text-white",
            "I brug" => "bg-primary text-white",
            "Udlånt" => "bg-warning text-dark",
            "Til reparation" => "bg-danger text-white",
            "Udfaset" => "bg-secondary text-white",
            _ => "bg-light text-dark"
        };
    }

    private void OnCategoryChanged(int? categoryId)
    {
        selectedCategoryId = categoryId;
        ApplyFilters();
    }

    private void OnStatusChanged(string status)
    {
        selectedStatus = status;
        ApplyFilters();
    }

    private string? SerialSearchTerm
    {
        get => serialSearchTerm;
        set
        {
            serialSearchTerm = value;
            ApplyFilters();
            StateHasChanged();

        }
    }

    private async Task DeleteAsset(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure u want to delete this asset?");
        if (confirmed)
        {
            await AssetService.DeleteAsync(id);
            allAssets = await AssetService.GetFilteredAssetsAsync(null, null);
            ApplyFilters();
            StateHasChanged();
        }
    }

}
